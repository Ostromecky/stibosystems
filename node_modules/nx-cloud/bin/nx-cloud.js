#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const module_1 = require("module");
const stripJsonComments = require("strip-json-comments");
const fs_1 = require("fs");
// Light client bundle might not be stored in a child directory relative to where
// the `nx-cloud` process is invoked
// Add the directory we are invoking `nx-cloud` from to the require path
// explicitly so we are able to access installed dependencies
addProcessInvocationLocationToNodeRequirePath();
const command = process.argv[2];
const options = JSON.parse(stripJsonComments((0, fs_1.readFileSync)(`nx.json`).toString())).tasksRunnerOptions.default.options;
if (options.useLightClient) {
    Promise.resolve().then(() => __awaiter(void 0, void 0, void 0, function* () { return invokeCommandWithLightRunner(options); }));
}
else {
    invokeCommandFromBundledImplementation();
}
function invokeCommandWithLightRunner(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const { debugLog } = require('../lib/light-client/debug-logger');
        debugLog('Verifying current cloud bundle');
        const { verifyOrUpdateCloudBundle, } = require('../lib/light-client/update-manager');
        const { version, fullPath } = yield verifyOrUpdateCloudBundle(options);
        debugLog('Done: ', fullPath);
        const runner = require((0, path_1.join)(process.cwd(), fullPath, 'index.js'));
        if (command === 'start-agent') {
            runner.startAgent().catch((e) => {
                console.error(e);
                process.exit(1);
            });
        }
        else if (command === 'stop-all-agents') {
            runner.stopAllAgents().catch((e) => {
                console.error(e);
                process.exit(1);
            });
        }
        else if (command === 'start-ci-run') {
            runner.startCiRun().catch((e) => {
                console.error(e);
                process.exit(1);
            });
        }
        else if (command === 'clean-up-agents') {
            runner.cleanUpAgents().catch((e) => {
                console.error(e);
                process.exit(1);
            });
        }
        else if (command === 'record') {
            runner.runCommandAndStoreInCloud().catch((e) => {
                console.error(e);
                process.exit(1);
            });
        }
        else if (command === 'upload-and-show-run-details') {
            runner.uploadAndShowRunDetails().catch((e) => {
                console.error(e);
                process.exit(1);
            });
        }
        else {
            console.log('Pass start-agent, stop-all-agents, or clean-up-agents');
        }
    });
}
function invokeCommandFromBundledImplementation() {
    if (command === 'start-agent') {
        const { startAgent, } = require('../lib/core/runners/distributed-agent/distributed-agent.impl');
        startAgent().catch((e) => {
            console.error(e);
            process.exit(1);
        });
    }
    else if (command === 'stop-all-agents') {
        const { stopAllAgents } = require('../lib/core/commands/stop-all-agents');
        stopAllAgents().catch((e) => {
            console.error(e);
            process.exit(1);
        });
    }
    else if (command === 'start-ci-run') {
        const { startCiRun } = require('../lib/core/commands/start-ci-run');
        startCiRun().catch((e) => {
            console.error(e);
            process.exit(1);
        });
    }
    else if (command === 'clean-up-agents') {
        const { cleanUpAgents } = require('../lib/core/commands/clean-up-agents');
        cleanUpAgents().catch((e) => {
            console.error(e);
            process.exit(1);
        });
    }
    else if (command === 'record') {
        const { runCommandAndStoreInCloud, } = require('../lib/core/commands/record-output');
        runCommandAndStoreInCloud().catch((e) => {
            console.error(e);
            process.exit(1);
        });
    }
    else if (command === 'upload-and-show-run-details') {
        const { uploadAndShowRunDetails, } = require('../lib/core/commands/upload-and-show-run-details');
        uploadAndShowRunDetails().catch((e) => {
            console.error(e);
            process.exit(1);
        });
    }
    else {
        console.log('Pass start-agent, stop-all-agents, or clean-up-agents');
    }
}
function addProcessInvocationLocationToNodeRequirePath() {
    // __dirname will be at [some folder]/node_modules/nx-cloud/bin
    // so escape two directory levels to get to node_modules where we have
    // invoked from
    addToNodePath((0, path_1.join)(__dirname, '../..'));
    // Re-initialize the paths into require
    module_1.Module._initPaths();
}
function addToNodePath(dir) {
    // NODE_PATH is a delimited list of paths.
    // The delimiter is different for windows.
    const delimiter = require('path').delimiter;
    const paths = process.env.NODE_PATH
        ? process.env.NODE_PATH.split(delimiter)
        : [];
    // The path is already in the node path
    if (paths.includes(dir)) {
        return;
    }
    // Add the tmp path
    paths.push(dir);
    // Update the env variable.
    process.env.NODE_PATH = paths.join(delimiter);
}
//# sourceMappingURL=nx-cloud.js.map