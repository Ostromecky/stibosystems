"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.nxCloudTasksRunnerShell = void 0;
const path_1 = require("path");
const update_manager_1 = require("./update-manager");
const nx_cloud_tasks_runner_1 = require("../nx-cloud-tasks-runner");
const debug_logger_1 = require("./debug-logger");
const nxCloudTasksRunnerShell = (tasks, options, context = {}) => __awaiter(void 0, void 0, void 0, function* () {
    if (options.useLightClient) {
        (0, debug_logger_1.debugLog)('Using light client');
        const { version, fullPath } = yield (0, update_manager_1.verifyOrUpdateCloudBundle)(options);
        (0, debug_logger_1.debugLog)('Using bundle path: ', fullPath);
        options.clientVersion = version;
        const runner = require((0, path_1.join)(process.cwd(), fullPath, 'index.js'));
        return runner.nxCloudTasksRunner(tasks, options, context);
    }
    else {
        return (0, nx_cloud_tasks_runner_1.default)(tasks, options, context);
    }
});
exports.nxCloudTasksRunnerShell = nxCloudTasksRunnerShell;
//# sourceMappingURL=nx-cloud-tasks-runner-shell.js.map